version: 2.1

orbs:
  slack: circleci/slack@4.10.1

executors:
  aws_cli_executor:
    docker:
      - image: amazon/aws-cli #image for creating infrastructure on AWS

  python_alpine_executor:
    docker:
      - image: python:3.10.6-alpine3.16 #image for installing ansible and configuring infrastructure

  alpine_executor:
    docker:
      - image: alpine:latest

  nodejs_executor:
    docker:
      - image: cimg/node:13.8.0

  base_executor:
    docker:
      - image: cimg/base:stable

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflowID:
        type: string
        description: The workflow ID
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-<<parameters.workflowID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflowID:
        type: string
        description: The workflow ID
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflowID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi

jobs:
  build-frontend:
    executor: nodejs_executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    executor: nodejs_executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm run test
      - notify_on_failure

  test-backend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm run test
      - notify_on_failure

  scan-frontend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Scan backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    executor: aws_cli_executor
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar, gZip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    executor: python_alpine_executor
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["16:25:df:72:30:b2:55:05:ef:84:30:12:25:7d:9d:70"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            pip install awscli
            aws --version
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    executor: python_alpine_executor
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Install Dependencies
          command: |
            apk add --update nodejs npm
            pip install awscli
            aws --version
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    executor: python_alpine_executor
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
            apk add --update nodejs npm
            pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-backend:
    executor: python_alpine_executor
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["16:25:df:72:30:b2:55:05:ef:84:30:12:25:7d:9d:70"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
            apk add --update nodejs npm
            apk add --update ansible
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run:
          name: Echo env file
          command: |
            cat ~/project/backend/.env
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  notify_on_success:
    executor: base_executor
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deployment_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - notify_on_success:
          context: slack-secrets
          requires:
            - deploy-frontend
            - deploy-backend
