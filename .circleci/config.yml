version: 2.1

orbs:
  slack: circleci/slack@4.10.1

executors:
  aws_cli_executor:
    docker:
      - image: amazon/aws-cli #image for creating infrastructure on AWS

  python_alpine_executor:
    docker:
      - image: python:3.10.6-alpine3.16 #image for installing ansible and configuring infrastructure

  alpine_executor:
    docker:
      - image: alpine:latest

  nodejs_executor:
    docker:
      - image: circleci/node:13.8.0

  base_executor:
    docker:
      - image: cimg/base:stable

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflowID:
        type: string
        description: The workflow ID
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-<<parameters.workflowID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflowID:
        type: string
        description: The workflow ID
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflowID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi

jobs:
  build-frontend:
    executor: nodejs_executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    executor: nodejs_executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm run test
      - notify_on_failure

  test-backend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm run test
      - notify_on_failure

  scan-frontend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Scan backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_on_failure

  deploy-frontend-infrastructure:
    executor: aws_cli_executor
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar gZip
          command: yum install -y tar gzip
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment

  deploy-backend-infrastructure:
    executor: aws_cli_executor
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar gZip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
      - run:
          name: Echo backend IP
          command: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    executor: python_alpine_executor
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["16:25:df:72:30:b2:55:05:ef:84:30:12:25:7d:9d:70"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update --no-cache ansible tar gzip aws-cli openssh
            aws --version
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys:
            - backend-build
      # - run:
      #     name: Install Dependencies
      #     command: |
      #       apk add --update curl
      #       apk add --update nodejs npm
      #       pip install awscli
      #       aws --version
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            sudo npm install -g npm
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Echo migration output
          command: |
            cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No pending migrations"
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    executor: python_alpine_executor
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # - restore_cache:
      #     keys:
      #       - frontend-build
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar
            apk add --update --no-cache gzip
            apk add --update --no-cache curl
            apk add --update --no-cache nodejs 
            apk add --update --no-cache npm
            apk add --update --no-cache aws-cli
            aws --version
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-backend:
    executor: python_alpine_executor
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["16:25:df:72:30:b2:55:05:ef:84:30:12:25:7d:9d:70"]
      # attach workspace
      - attach_workspace:
          at: ~/
      # - restore_cache:
      #     keys:
      #       - backend-build
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar
            apk add --update --no-cache gzip
            apk add --update --no-cache curl
            apk add --update --no-cache nodejs 
            apk add --update --no-cache npm
            apk add --update --no-cache ansible
            apk add --update --no-cache aws-cli
            aws --version
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            pwd
            touch .env
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"

            pwd
            ls -lah
            npm install
            npm run build
            cd ..
            pwd
            ls -lah
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - run:
          name: Echo env file
          command: |
            cat ~/project/backend/.env
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  smoke-test:
    executor: python_alpine_executor
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip curl nodejs npm aws-cli
            aws --version
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo "Sleeping for 1 minute"
            sleep 60
            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "welcome"
            then
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      # - destroy-environment
      # - revert-migrations

  notify_on_success:
    executor: base_executor
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deployment_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-frontend-infrastructure:
          requires:
            - test-frontend
            - scan-frontend
      - deploy-backend-infrastructure:
          requires:
            - test-backend
            - scan-backend
      - configure-infrastructure:
          requires:
            - deploy-backend-infrastructure
            - deploy-frontend-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-frontend
            - deploy-backend
      - notify_on_success:
          context: slack-secrets
          requires:
            - smoke-test
