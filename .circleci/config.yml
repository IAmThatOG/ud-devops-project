version: 2.1

orbs:
  slack: circleci/slack@4.10.1

executors:
  aws_cli_executor:
    docker:
      - image: amazon/aws-cli #image for creating infrastructure on AWS

  python_alpine_executor:
    docker:
      - image: python:3.7-alpine3.16 #image for installing ansible and configuring infrastructure

  alpine_executor:
    docker:
      - image: alpine:latest

  nodejs_executor:
    docker:
      - image: cimg/node:13.8.0

  base_executor:
    docker:
      - image: cimg/base:stable

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  build-frontend:
    executor: nodejs_executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    executor: nodejs_executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm run test
      - notify_on_failure

  test-backend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm run test
      - notify_on_failure

  scan-frontend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    executor: nodejs_executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Scan backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_on_failure

  notify_on_success:
    executor: base_executor
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deployment_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - notify_on_success:
          requires:
            - scan-backend
            - scan-frontend
